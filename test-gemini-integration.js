#!/usr/bin/env node
/**
 * Script de test automatis√© pour l'int√©gration Gemini AI
 * Teste les fonctionnalit√©s compl√®tes du diagnostic d'orientation
 */

const API_BASE = 'http://localhost:3002';

// Donn√©es de test simulant un diagnostic complet
const testDiagnosticData = {
  overallScore: 68,
  categoryScores: {
    engagementDirection: { score: 15, maxScore: 20, percentage: 75, level: "Bon" },
    relationsPartenaires: { score: 8, maxScore: 15, percentage: 53, level: "Interm√©diaire" },
    gestionCategories: { score: 12, maxScore: 15, percentage: 80, level: "Bon" },
    collaborationInnovation: { score: 6, maxScore: 15, percentage: 40, level: "D√©butant" },
    organisationProcessus: { score: 11, maxScore: 15, percentage: 73, level: "Bon" },
    gestionContrats: { score: 7, maxScore: 15, percentage: 47, level: "D√©butant" },
    sourcingStrategique: { score: 8, maxScore: 15, percentage: 53, level: "Interm√©diaire" },
    gestionRisques: { score: 6, maxScore: 15, percentage: 40, level: "D√©butant" },
    gestionTalents: { score: 5, maxScore: 15, percentage: 33, level: "D√©butant" }
  },
  answers: {},
  timestamp: new Date().toISOString()
};

async function testGeminiIntegration() {
  console.log('üß™ Test d\'int√©gration Gemini AI - Diagnostic d\'Orientation');
  console.log('================================================\n');

  try {
    // Test 1: V√©rifier que l'API est en ligne
    console.log('1Ô∏è‚É£ Test de connectivit√© API...');
    const healthResponse = await fetch(`${API_BASE}/api/orientation-analysis`);
    const healthData = await healthResponse.json();
    
    console.log(`   ‚úÖ API Status: ${healthData.status}`);
    console.log(`   ü§ñ Gemini Available: ${healthData.geminiAvailable}`);
    console.log(`   üìÖ Version: ${healthData.version}\n`);

    // Test 2: Analyse compl√®te avec Gemini
    console.log('2Ô∏è‚É£ Test d\'analyse Gemini...');
    const analysisResponse = await fetch(`${API_BASE}/api/orientation-analysis`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        diagnosticData: testDiagnosticData
      })
    });

    if (!analysisResponse.ok) {
      throw new Error(`Erreur HTTP: ${analysisResponse.status}`);
    }

    const analysisResult = await analysisResponse.json();
    
    if (!analysisResult.success) {
      throw new Error(`Analyse √©chou√©e: ${analysisResult.error}`);
    }

    const analysis = analysisResult.analysis;
    
    console.log('   ‚úÖ Analyse Gemini r√©ussie !');
    console.log(`   üìä Score global analys√©: ${analysis.metadata.scoreGlobal}%`);
    console.log(`   üéØ Niveau maturit√©: ${analysis.metadata.niveauMaturite}`);
    console.log(`   ü§ñ IA utilis√©e: ${analysis.metadata.aiPowered ? 'Oui' : 'Non (Fallback)'}\n`);

    // Test 3: Validation de la qualit√© de l'analyse
    console.log('3Ô∏è‚É£ Validation qualit√© de l\'analyse...');
    
    const qualityChecks = [
      {
        name: 'Insights pr√©sents',
        check: analysis.insights && analysis.insights.length > 50,
        value: analysis.insights ? `${analysis.insights.length} caract√®res` : 'Absent'
      },
      {
        name: 'Recommandations (3-5)',
        check: analysis.recommendations && analysis.recommendations.length >= 3 && analysis.recommendations.length <= 5,
        value: analysis.recommendations ? `${analysis.recommendations.length} recommandations` : 'Absent'
      },
      {
        name: 'Actions prioritaires',
        check: analysis.priorityActions && analysis.priorityActions.length >= 2,
        value: analysis.priorityActions ? `${analysis.priorityActions.length} actions` : 'Absent'
      },
      {
        name: 'Benchmark sectoriel',
        check: analysis.industryBenchmark && analysis.industryBenchmark.length > 20,
        value: analysis.industryBenchmark ? 'Pr√©sent' : 'Absent'
      },
      {
        name: 'Ressources sugg√©r√©es',
        check: analysis.resourceSuggestions && analysis.resourceSuggestions.length >= 3,
        value: analysis.resourceSuggestions ? `${analysis.resourceSuggestions.length} ressources` : 'Absent'
      },
      {
        name: 'Feuille de route',
        check: analysis.roadmapSuggestions && analysis.roadmapSuggestions.length >= 3,
        value: analysis.roadmapSuggestions ? `${analysis.roadmapSuggestions.length} √©tapes` : 'Absent'
      }
    ];

    qualityChecks.forEach(check => {
      const status = check.check ? '‚úÖ' : '‚ùå';
      console.log(`   ${status} ${check.name}: ${check.value}`);
    });

    const successfulChecks = qualityChecks.filter(c => c.check).length;
    const qualityScore = Math.round((successfulChecks / qualityChecks.length) * 100);
    
    console.log(`\n   üìà Score qualit√©: ${qualityScore}% (${successfulChecks}/${qualityChecks.length})\n`);

    // Test 4: Performance et temps de r√©ponse
    console.log('4Ô∏è‚É£ Test de performance...');
    const startTime = Date.now();
    
    await fetch(`${API_BASE}/api/orientation-analysis`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        diagnosticData: testDiagnosticData
      })
    });
    
    const responseTime = Date.now() - startTime;
    console.log(`   ‚ö° Temps de r√©ponse: ${responseTime}ms`);
    console.log(`   ${responseTime < 10000 ? '‚úÖ' : '‚ö†Ô∏è'} Performance: ${responseTime < 5000 ? 'Excellente' : responseTime < 10000 ? 'Bonne' : '√Ä optimiser'}\n`);

    // R√©sum√© final
    console.log('üéâ R√âSUM√â DU TEST');
    console.log('=================');
    console.log(`‚úÖ API fonctionnelle: Oui`);
    console.log(`ü§ñ Gemini int√©gr√©: ${healthData.geminiAvailable ? 'Oui' : 'Non'}`);
    console.log(`üìä Qualit√© analyse: ${qualityScore}%`);
    console.log(`‚ö° Performance: ${responseTime}ms`);
    
    if (qualityScore >= 80 && responseTime < 10000) {
      console.log('\nüéØ STATUS: INT√âGRATION R√âUSSIE ! üéØ');
    } else {
      console.log('\n‚ö†Ô∏è STATUS: AM√âLIORATIONS N√âCESSAIRES');
    }

    // Affichage d'un exemple d'analyse
    console.log('\nüìÑ EXEMPLE D\'ANALYSE G√âN√âR√âE:');
    console.log('===========================');
    console.log('Insights:', analysis.insights.substring(0, 200) + '...');
    console.log('\nRecommandations:');
    analysis.recommendations.slice(0, 2).forEach((rec, i) => {
      console.log(`${i + 1}. ${rec}`);
    });

  } catch (error) {
    console.error('‚ùå ERREUR LORS DU TEST:', error.message);
    console.log('\nüîß ACTIONS CORRECTIVES SUGG√âR√âES:');
    console.log('- V√©rifier que le serveur Next.js est en marche (npm run dev)');
    console.log('- V√©rifier la configuration GOOGLE_GEMINI_API_KEY dans .env.local');
    console.log('- V√©rifier la connectivit√© internet pour Gemini AI');
    process.exit(1);
  }
}

// Ex√©cution du test
testGeminiIntegration();
