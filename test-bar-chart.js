#!/usr/bin/env node
/**
 * Test automatisÃ© pour vÃ©rifier l'affichage du graphique en barres
 */

console.log('ðŸ§ª Test du Graphique en Barres - Diagnostic d\'Orientation');
console.log('=====================================================\n');

// Simulation de donnÃ©es de diagnostic
const testResult = {
  categoryScores: {
    'Engagement Direction & StratÃ©gie': { score: 15, maxScore: 20, percentage: 75, level: 'Bon' },
    'Relations avec Partenaires Internes': { score: 8, maxScore: 15, percentage: 53, level: 'IntermÃ©diaire' },
    'Gestion par CatÃ©gories': { score: 12, maxScore: 15, percentage: 80, level: 'Bon' },
    'Collaboration et Innovation Fournisseurs': { score: 6, maxScore: 15, percentage: 40, level: 'DÃ©butant' },
    'Organisation et Processus': { score: 11, maxScore: 15, percentage: 73, level: 'Bon' },
    'Gestion des Contrats': { score: 7, maxScore: 15, percentage: 47, level: 'DÃ©butant' },
    'Sourcing StratÃ©gique': { score: 8, maxScore: 15, percentage: 53, level: 'IntermÃ©diaire' },
    'Gestion des Risques': { score: 6, maxScore: 15, percentage: 40, level: 'DÃ©butant' },
    'Gestion des Talents': { score: 5, maxScore: 15, percentage: 33, level: 'DÃ©butant' }
  }
};

// PrÃ©paration des donnÃ©es comme dans le composant
const barData = Object.entries(testResult.categoryScores)
  .map(([category, data]) => ({
    name: category.length > 25 ? category.substring(0, 25) + '...' : category,
    fullName: category,
    percentage: data.percentage || 0,
    score: data.score || 0,
    maxScore: data.maxScore || 0,
    level: data.level
  }))
  .sort((a, b) => b.percentage - a.percentage);

console.log('ðŸ“Š DonnÃ©es pour graphique en barres:');
console.log('=====================================');
barData.forEach((item, index) => {
  const bar = 'â–ˆ'.repeat(Math.round(item.percentage / 5)); // Barre ASCII
  console.log(`${index + 1}. ${item.name.padEnd(30)} ${item.percentage}% ${bar}`);
});

console.log('\nâœ… Structure des donnÃ©es:');
console.log('========================');
console.log('âœ“ Champ "name" pour YAxis:', barData[0].name ? 'PrÃ©sent' : 'Manquant');
console.log('âœ“ Champ "percentage" pour valeurs:', barData[0].percentage !== undefined ? 'PrÃ©sent' : 'Manquant');
console.log('âœ“ Tri par score dÃ©croissant:', barData[0].percentage >= barData[1].percentage ? 'OK' : 'Erreur');
console.log('âœ“ Nombre de catÃ©gories:', barData.length);

console.log('\nðŸŽ¯ Configuration recommandÃ©e:');
console.log('=============================');
console.log('- Layout: "vertical" âœ“');
console.log('- YAxis dataKey: "name" âœ“');
console.log('- Bar dataKey: "percentage" âœ“');
console.log('- Domain X: [0, 100] âœ“');
console.log('- Tri: score dÃ©croissant âœ“');

console.log('\nðŸš€ Le graphique en barres devrait maintenant s\'afficher correctement !');
