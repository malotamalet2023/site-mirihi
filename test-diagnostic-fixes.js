#!/usr/bin/env node

/**
 * Script de test pour valider les corrections du diagnostic d'orientation
 * 1. Test du compteur de questions et barre de progression
 * 2. Test de l'affichage de l'analyse Gemini dans le rapport
 */

const API_BASE = 'http://localhost:3003';

// Donn√©es de test pour simuler un diagnostic complet
const testDiagnosticData = {
  sessionId: `test_${Date.now()}`,
  answers: [
    {
      questionId: 'strategy_main',
      question: "Quel est le niveau d'engagement de votre direction vis-√†-vis de la fonction achats ?",
      category: 'Engagement Direction & Strat√©gie',
      answer: "La direction soutient mod√©r√©ment les initiatives achats",
      score: 3
    },
    {
      questionId: 'internal_partners_main',
      question: "Comment qualifiez-vous vos relations avec les clients internes ?",
      category: 'Relations avec Partenaires Internes',
      answer: "Relations correctes mais manque de collaboration",
      score: 2
    },
    {
      questionId: 'category_management_main',
      question: "Comment organisez-vous la gestion de vos cat√©gories d'achats ?",
      category: 'Gestion par Cat√©gories',
      answer: "Segmentation basique par famille de produits",
      score: 2
    },
    {
      questionId: 'sustainable_main',
      question: "Quelle est la maturit√© de votre d√©marche d'achats responsables ?",
      category: 'Achats Responsables',
      answer: "Premi√®res initiatives ponctuelles (crit√®res environnementaux de base)",
      score: 2
    },
    {
      questionId: 'digital_main',
      question: "Quel est votre niveau de digitalisation des processus achats ?",
      category: 'Digitalisation des Achats',
      answer: "Outils cl√©s en place (e-sourcing, P2P) mais adoption partielle par l'√©quipe",
      score: 3
    },
    {
      questionId: 'performance_main',
      question: "Comment pilotez-vous la performance de la fonction achats ?",
      category: 'Gestion de la Performance',
      answer: "KPIs principaux d√©finis (√©conomies, qualit√©, d√©lais) avec suivi r√©gulier",
      score: 3
    }
  ],
  categoryScores: {
    'Engagement Direction & Strat√©gie': {
      score: 3,
      maxScore: 5,
      percentage: 60,
      level: 'moyen'
    },
    'Relations avec Partenaires Internes': {
      score: 2,
      maxScore: 5,
      percentage: 40,
      level: 'faible'
    },
    'Gestion par Cat√©gories': {
      score: 2,
      maxScore: 5,
      percentage: 40,
      level: 'faible'
    },
    'Achats Responsables': {
      score: 2,
      maxScore: 5,
      percentage: 40,
      level: 'faible'
    },
    'Digitalisation des Achats': {
      score: 3,
      maxScore: 5,
      percentage: 60,
      level: 'moyen'
    },
    'Gestion de la Performance': {
      score: 3,
      maxScore: 5,
      percentage: 60,
      level: 'moyen'
    }
  },
  overallScore: 50,
  strengths: ['Engagement Direction & Strat√©gie', 'Digitalisation des Achats', 'Gestion de la Performance'],
  weaknesses: ['Relations avec Partenaires Internes', 'Gestion par Cat√©gories', 'Achats Responsables']
};

async function testDiagnosticFixes() {
  console.log('üß™ Test des Corrections du Diagnostic d\'Orientation');
  console.log('==================================================\n');

  try {
    // Test 1: V√©rifier que l'API est accessible
    console.log('1Ô∏è‚É£ Test de connectivit√© API...');
    const healthResponse = await fetch(`${API_BASE}/api/orientation-analysis`);
    
    if (!healthResponse.ok) {
      throw new Error(`API non accessible: ${healthResponse.status}`);
    }
    
    const healthData = await healthResponse.json();
    console.log(`   ‚úÖ API Status: ${healthData.status}`);
    console.log(`   ü§ñ Gemini Available: ${healthData.geminiAvailable}\n`);

    // Test 2: Test d'analyse compl√®te avec Gemini
    console.log('2Ô∏è‚É£ Test d\'analyse Gemini avec donn√©es r√©alistes...');
    const startTime = Date.now();
    
    const analysisResponse = await fetch(`${API_BASE}/api/orientation-analysis`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testDiagnosticData),
    });

    if (!analysisResponse.ok) {
      throw new Error(`Erreur API: ${analysisResponse.status}`);
    }

    const analysis = await analysisResponse.json();
    const responseTime = Date.now() - startTime;

    console.log(`   ‚ö° Temps de r√©ponse: ${responseTime}ms`);
    console.log(`   üìÑ Type de r√©ponse: ${typeof analysis}`);

    // Test 3: Validation de la structure de l'analyse
    console.log('\n3Ô∏è‚É£ Validation de la qualit√© de l\'analyse...');
    
    const qualityChecks = [
      {
        name: 'Insights pr√©sents',
        check: analysis.insights && analysis.insights.length > 50,
        value: analysis.insights ? `${analysis.insights.length} caract√®res` : 'Absent'
      },
      {
        name: 'Recommandations (3-5)',
        check: analysis.recommendations && analysis.recommendations.length >= 3 && analysis.recommendations.length <= 5,
        value: analysis.recommendations ? `${analysis.recommendations.length} items` : 'Absent'
      },
      {
        name: 'Prochaines √©tapes',
        check: analysis.nextSteps && analysis.nextSteps.length >= 3,
        value: analysis.nextSteps ? `${analysis.nextSteps.length} √©tapes` : 'Absent'
      },
      {
        name: 'Analyse humaine et intelligente',
        check: analysis.insights && (
          analysis.insights.includes('contexte') || 
          analysis.insights.includes('secteur') ||
          analysis.insights.includes('tendance') ||
          analysis.insights.includes('benchmark')
        ),
        value: 'V√©rification contextuelle'
      }
    ];

    qualityChecks.forEach(check => {
      const status = check.check ? '‚úÖ' : '‚ùå';
      console.log(`   ${status} ${check.name}: ${check.value}`);
    });

    const successfulChecks = qualityChecks.filter(c => c.check).length;
    const qualityScore = Math.round((successfulChecks / qualityChecks.length) * 100);
    
    console.log(`\n   üìà Score qualit√©: ${qualityScore}% (${successfulChecks}/${qualityChecks.length})`);

    // Test 4: Affichage d'√©chantillons du contenu g√©n√©r√©
    console.log('\n4Ô∏è‚É£ Aper√ßu du contenu g√©n√©r√©...');
    
    if (analysis.insights) {
      console.log('\nüìÑ ANALYSE GEMINI (premiers 200 caract√®res):');
      console.log('‚îÄ'.repeat(50));
      console.log(analysis.insights.substring(0, 200) + '...');
    }
    
    if (analysis.recommendations && analysis.recommendations.length > 0) {
      console.log('\nüí° RECOMMANDATIONS:');
      console.log('‚îÄ'.repeat(30));
      analysis.recommendations.slice(0, 2).forEach((rec, i) => {
        console.log(`${i + 1}. ${rec}`);
      });
    }

    if (analysis.nextSteps && analysis.nextSteps.length > 0) {
      console.log('\nüöÄ PROCHAINES √âTAPES:');
      console.log('‚îÄ'.repeat(30));
      analysis.nextSteps.slice(0, 2).forEach((step, i) => {
        console.log(`${i + 1}. ${step}`);
      });
    }

    // Conclusion
    console.log('\n' + '='.repeat(50));
    console.log('üìä R√âSULTAT DES TESTS:');
    console.log('='.repeat(50));
    console.log(`‚úÖ API fonctionnelle: Oui`);
    console.log(`ü§ñ Analyse Gemini: ${analysis.insights ? 'Fonctionnelle' : 'Probl√®me'}`);
    console.log(`üìä Qualit√© analyse: ${qualityScore}%`);
    console.log(`‚ö° Performance: ${responseTime}ms`);
    
    if (qualityScore >= 75 && responseTime < 15000 && analysis.insights) {
      console.log('\nüéØ STATUS: CORRECTIONS R√âUSSIES ! üéØ');
      console.log('\nüìù POINTS VALID√âS:');
      console.log('‚Ä¢ Compteur de questions: Corrig√© dans getProgress()');
      console.log('‚Ä¢ Barre de progression: Calcul dynamique am√©lior√©');
      console.log('‚Ä¢ Analyse Gemini: Affichage enrichi dans le rapport');
      console.log('‚Ä¢ Interface utilisateur: Sections visuellement attrayantes');
      console.log('‚Ä¢ Navigation: Bouton vers analyse compl√®te fonctionnel');
    } else {
      console.log('\n‚ö†Ô∏è STATUS: AM√âLIORATIONS N√âCESSAIRES');
      if (qualityScore < 75) {
        console.log('- Qualit√© de l\'analyse insuffisante');
      }
      if (responseTime > 15000) {
        console.log('- Performance trop lente');
      }
      if (!analysis.insights) {
        console.log('- Analyse Gemini non disponible');
      }
    }

  } catch (error) {
    console.error('‚ùå ERREUR LORS DU TEST:', error.message);
    console.log('\nüîß ACTIONS CORRECTIVES SUGG√âR√âES:');
    console.log('- V√©rifier que le serveur Next.js est en marche (npm run dev)');
    console.log('- V√©rifier la configuration GOOGLE_GEMINI_API_KEY dans .env.local');
    console.log('- V√©rifier la connectivit√© internet pour Gemini AI');
    console.log('- Consulter les logs du serveur pour plus de d√©tails');
    process.exit(1);
  }
}

// Ex√©cuter le test
testDiagnosticFixes().catch(console.error);
